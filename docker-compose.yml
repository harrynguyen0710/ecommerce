services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - ecommerce

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - ecommerce

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    command: ["--replSet", "rs0"]
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/init-dbs.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ecommerce

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce

  product-service:
    build: ./services/products
    container_name: product-service
    command: npx nodemon server.js
    ports:
      - "5001:5001"
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    env_file:
      - ./services/products/.env
    volumes:
      - ./services/products:/app
      - /app/node_modules
      - mongo_data:/data/db
      - ./services/products/infra/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce

  product-outbox-worker:
    build:
      context: ./services/products
    container_name: product-outbox-worker
    command: ["node", "src/jobs/runOutboxWorker.js"]
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy

    environment:
      - MONGO_URI=mongodb://mongo:27017/product_service?replicaSet=rs0
      - KAFKA_BROKER=kafka:9092

    networks:
      - ecommerce

  product-bulk-consumer:
    build:
      context: ./services/products
    command: node src/kafka/index.js
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/products/.env
    networks:
      - ecommerce
    deploy:
      replicas: 5

  inventory-service:
    build: ./services/inventories
    container_name: inventory-service
    command: npx nodemon server.js
    ports:
      - "5002:5002"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  inventory-bulk-consumer:
    build: ./services/inventories
    container_name: inventory-bulk-consumer
    command: node src/kafka/startInventoryBulkConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  inventory-consumer:
    build: ./services/inventories
    container_name: inventory-consumer
    command: node src/kafkaWorker.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  inventory-reserve-consumer:
    build: ./services/inventories
    container_name: inventory-reserve-consumer
    command: node /app/src/servers/startReserveInventoryConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  inventory-order-created-consumer:
    build: ./services/inventories
    container_name: inventory-order-created-consumer
    command: node src/server/startOrderCreatedConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  inventory-order-cancelled-consumer:
    build: ./services/inventories
    container_name: inventory-order-cancelled-consumer
    command: node src/server/startOrderCancelledConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/inventories/.env
    volumes:
      - ./services/inventories:/app
      - /app/node_modules
    networks:
      - ecommerce

  discount-service:
    build: ./services/discounts
    container_name: discount-service
    env_file:
      - ./services/discounts/.env
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "5003:5003"
    volumes:
      - ./services/discounts:/app
      - /app/node_modules
    networks:
      - ecommerce

  discount_consumer:
    build:
      context: ./services/discounts
    container_name: discount_consumer
    command: node startConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./services/discounts/.env
    networks:
      - ecommerce

  file-upload-service:
    build: ./services/file-upload
    container_name: file-upload-service
    ports:
      - "5004:5004"
    volumes:
      - ./services/file-upload:/app
      - /app/node_modules
    depends_on:
      - redis
    env_file:
      - ./services/file-upload/.env
    networks:
      - ecommerce

  file-worker:
    build:
      context: ./services/file-upload
    container_name: file-worker
    command: node src/jobs/insertProductProcessor.js
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./services/file-upload/.env
    volumes:
      - ./services/file-upload/uploads:/app/uploads
    networks:
      - ecommerce

  logging-service:
    build:
      context: ./services/logging
    container_name: logging-service
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/logging/.env
    ports:
      - "5005:5005"
    networks:
      - ecommerce

  cart-service:
    build:
      context: ./services/cart
    container_name: cart-service
    command: node server.js
    ports:
      - "5006:5006"
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./services/cart/.env
    volumes:
      - ./services/cart:/app
      - /app/node_modules
    networks:
      - ecommerce

  cart-cleanup-consumer:
    build: ./services/carts
    container_name: cart-cleanup-consumer
    command: node src/server/consumerCleanup.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/cart/.env
    networks:
      - ecommerce

  cart-checkout-consumer:
    build: ./services/carts
    container_name: cart-checkout-consumer
    command: node src/server/checkoutConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/cart/.env
    networks:
      - ecommerce

  cart-unlock-consumer:
    build: ./services/carts
    container_name: cart-unlock-consumer
    command: node src/server/orderCancelledConsumer.js
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./services/cart/.env
    networks:
      - ecommerce

  order-service:
    build:
      context: ./services/orders
    container_name: order-service
    command: npx nodemon server.js
    ports:
      - "5007:5007"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./services/orders/.env
    volumes:
      - ./services/orders:/app
      - /app/node_modules
    networks:
      - ecommerce
  


volumes:
  mongo_data:
  pgdata:

networks:
  ecommerce:
    name: ecommerce
    driver: bridge
